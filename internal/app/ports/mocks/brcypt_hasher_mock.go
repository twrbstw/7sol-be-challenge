// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/ports/hasher.go
//
// Generated by this command:
//
//      mockgen -source=internal/app/ports/hasher.go IHasher -destination=internal/app/ports/mocks/bcrypt_hasher_mock.go -package=mocks
//

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIHasher is a mock of IHasher interface.
type MockIHasher struct {
	ctrl     *gomock.Controller
	recorder *MockIHasherMockRecorder
	isgomock struct{}
}

// MockIHasherMockRecorder is the mock recorder for MockIHasher.
type MockIHasherMockRecorder struct {
	mock *MockIHasher
}

// NewMockIHasher creates a new mock instance.
func NewMockIHasher(ctrl *gomock.Controller) *MockIHasher {
	mock := &MockIHasher{ctrl: ctrl}
	mock.recorder = &MockIHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHasher) EXPECT() *MockIHasherMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method.
func (m *MockIHasher) ComparePassword(hashed, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", hashed, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockIHasherMockRecorder) ComparePassword(hashed, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockIHasher)(nil).ComparePassword), hashed, password)
}

// HashPassword mocks base method.
func (m *MockIHasher) HashPassword(pwd string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", pwd)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockIHasherMockRecorder) HashPassword(pwd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockIHasher)(nil).HashPassword), pwd)
}
