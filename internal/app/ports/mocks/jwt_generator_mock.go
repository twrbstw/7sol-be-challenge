// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/ports/jwt_generator.go
//
// Generated by this command:
//
//      mockgen -source=internal/app/ports/jwt_generator.go IJwtGenerator -destination=internal/app/ports/mocks/jwt_generator_mock.go -package=mocks
//

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIJwtGenerator is a mock of IJwtGenerator interface.
type MockIJwtGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockIJwtGeneratorMockRecorder
	isgomock struct{}
}

// MockIJwtGeneratorMockRecorder is the mock recorder for MockIJwtGenerator.
type MockIJwtGeneratorMockRecorder struct {
	mock *MockIJwtGenerator
}

// NewMockIJwtGenerator creates a new mock instance.
func NewMockIJwtGenerator(ctrl *gomock.Controller) *MockIJwtGenerator {
	mock := &MockIJwtGenerator{ctrl: ctrl}
	mock.recorder = &MockIJwtGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIJwtGenerator) EXPECT() *MockIJwtGeneratorMockRecorder {
	return m.recorder
}

// GenerateJwt mocks base method.
func (m *MockIJwtGenerator) GenerateJwt(name, email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJwt", name, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJwt indicates an expected call of GenerateJwt.
func (mr *MockIJwtGeneratorMockRecorder) GenerateJwt(name, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJwt", reflect.TypeOf((*MockIJwtGenerator)(nil).GenerateJwt), name, email)
}
